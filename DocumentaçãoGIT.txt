Documentação Versão 0.2

Primeiro passo é criar um repositório no GITHUB

O que é um repositório?
Um repositório é onde ficam os arquivos e o histórico de um projeto.
Pode ser local (no seu computador) ou remoto (como no GitHub).
Ele guarda tudo que é feito no projeto: códigos, alterações, versões e histórico.


==============================
Trajeto até realizar um commit
============================== 

mkdir "C:\Users\Desktop\GITHUB\ProjetoGIT"
cd "C:\Users\Desktop\GITHUB\ProjetoGIT"

// mkdir: Cria uma pasta no caminho que especificar
// cd: Entra na pasta no caminho especificado

New-Item "TesteVersionamento.txt"

// New-Item: Cria um novo arquivo

git init

// Isso cria a pasta .git e transforma o diretório em um repositório Git local.

O que é uma branch?
Uma branch é um caminho separado de desenvolvimento.
Serve pra testar novas ideias ou fazer alterações sem mexer no código principal.
A principal normalmente se chama master ou main.

// (Opcional) Renomear a branch principal para master
// Se ela veio como main, você pode mudar assim:

git branch

// Verifique o nome do branch atual: se aparecer um asterisco do lado de master, está tudo certo.
// Se não for master, renomeie o branch atual para master:

git branch [Nome da branch]

//cria uma nova branch

git checkout [Nome da branch]

//Muda a branch na qual está realizando commits 

git branch -m master

// Configurar o GitHub para usar esse branch (no repositório remoto):

git remote add origin https://github.com/seunome/nomedorepo.git

// Esse comando vincula seu projeto local com o repositório remoto chamado origin (padrão) no GitHub.

git remote -v

// Testa o vínculo do projeto local com o repositório remoto.

git config --global user.name "Seu Nome"
git config --global user.email "seuemail@email.com"

// Isso define quem está fazendo os commits no projeto.

git add .

// Adiciona todos os arquivos da pasta para serem commitados.

git commit -m "Primeiro commit"

// Faz o commit dos arquivos adicionados com uma mensagem.

git push --set-upstream origin master

// Envia os commits para o repositório remoto e define o branch master como padrão.

git status

//Verifica se os arquivos locais foram alterados 

git reflog

//verifica o histórico commits, até mesmo em commits descartados, resets e checkouts.

git reset --hard <id-do-commit>

//reseta o commit definitivamente para um commit informado (Desfazendo o que veio depois) de forma local

git reset --soft <id-do-commit>

//Volta pro commit anterior, mas mantém as mudanças nos arquivos e no staging. Ideal pra refazer commits.

git push --force origin master

// força o envio da sua branch master local para o repositório remoto no GitHub substituindo qualquer alteração que tenha sido feita no GitHub depois do ultimo commit. (Sobrescreve o histórico REMOTO)

git log

//Mostra os commits do histórico oficial da sua branch, reflete apenas o que foi confirmado no projeto

git checkout <id-do-commit>

//Agora você está temporariamente vendo o projeto como era naquele commit.

git checkout master

//Pra voltar pro seu branch





